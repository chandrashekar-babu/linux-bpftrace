#!/usr/bin/bpftrace

/*
 * slowdisk.bt - A bpftrace script to trace slow block device I/O.
 *
 * This tool traces block I/O requests and prints details for any request
 * that takes longer than a defined threshold (default: 10ms) to complete.
 * This is useful for identifying storage performance bottlenecks.
 *
 * NOTE: This version uses kprobes instead of tracepoints for better
 * compatibility across different kernel versions.
 *
 * USAGE: sudo bpftrace slowdisk.bt
 */

#ifndef BPFTRACE_HAVE_BTF
#include <linux/blkdev.h>
#endif

// Define the latency threshold in nanoseconds. 10ms = 10,000,000 ns.
#define LATENCY_THRESHOLD_NS 10000000

BEGIN
{
	printf("Tracing block I/O slower than %d ms... Hit Ctrl-C to end.\n",
	    LATENCY_THRESHOLD_NS / 1000000);
	printf("%-14s %-6s %-7s %-4s %-8s %s\n", "COMM", "PID", "DEVICE", "T", "BYTES", "LAT(ms)");
}

/*
 * Trace when I/O accounting starts for a request.
 * We use this as the start point. The first argument (arg0) is the
 * 'struct request *', which uniquely identifies the I/O.
 */
kprobe:blk_account_io_start
{
	@start[arg0] = nsecs;
}

/*
 * Trace when I/O accounting is done for a request.
 * This is our end point. We calculate the latency and print if it's slow.
 */
kprobe:blk_account_io_done
{
	// Get the request pointer from the first argument.
	$req = (struct request *)arg0;
	
	// Look up the start time for this request.
	$start_ns = @start[(int64)$req];
	if ($start_ns == 0) {
		// We missed the start event, so we can't calculate latency.
		return;
	}

	// Calculate the duration in nanoseconds.
	$latency_ns = nsecs - $start_ns;

	if ($latency_ns > LATENCY_THRESHOLD_NS) {
		// Get details from the request struct.
		// FIX: Access the disk via the request_queue (q) for modern kernels.
		$disk = $req->q->disk;
		$dev = $disk ? ($disk->major << 20) | $disk->first_minor : 0;
		$type = ($req->cmd_flags & REQ_OP_WRITE) ? "W" : "R";
		$bytes = $req->__data_len;

		printf("%-14s %-6d %-7d %-4s %-8d %d\n",
		    comm,
		    pid,
		    $dev,
		    $type,
		    $bytes,
		    $latency_ns / 1000000   // Convert ns to ms
		);
	}

	// Clean up the map entry for this completed request.
	delete(@start[(int64)$req]);
}

END
{
	// Final cleanup.
	clear(@start);
	printf("Exiting.\n");
}

