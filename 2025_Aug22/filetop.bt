#!/usr/bin/bpftrace

/*
 * filetop.bt - A bpftrace script to display real-time file I/O activity.
 *
 * This tool traces read() and write() syscalls to measure the throughput
 * for each process, similar to the bcc-tools 'filetop'. It prints the top
- * processes every 5 seconds.
 *
 * USAGE: sudo bpftrace filetop.bt
 */

BEGIN
{
	printf("Tracing file I/O... Hit Ctrl-C to end.\n");
}

/*
 * Trace successful read() syscalls.
 * We use the sys_exit tracepoint because we need the return value,
 * which is the number of bytes successfully read.
 */
tracepoint:syscalls:sys_exit_read
{
	// args->ret holds the return value of the syscall.
	// A value > 0 indicates a successful read.
	if (args->ret > 0) {
		@reads[pid, comm] = sum(args->ret);
	}
}

/*
 * Trace successful write() syscalls.
 * Similar to reads, we trace the exit to get the number of bytes written.
 */
tracepoint:syscalls:sys_exit_write
{
	if (args->ret > 0) {
		@writes[pid, comm] = sum(args->ret);
	}
}

/*
 * Reporting Interval
 * This block executes periodically to display the collected data.
 */
interval:s:5
{
	// Clear the screen for a clean, refreshing 'top'-like output.
	printf("\033[2J\033[H");
	printf("Top file I/O over the last 5 seconds (updated at %s)\n\n", strftime("%H:%M:%S", nsecs));

	printf("--- Top 10 by Bytes Read ---\n");
	// The '10' argument limits the output to the top 10 entries.
	print(@reads, 10);

	printf("\n--- Top 10 by Bytes Written ---\n");
	print(@writes, 10);

	// Clear the data maps to start fresh for the next interval.
	clear(@reads);
	clear(@writes);
}

END
{
	// Final cleanup when the script is terminated (Ctrl-C).
	clear(@reads);
	clear(@writes);
	printf("Exiting.\n");
}

